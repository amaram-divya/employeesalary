# -*- coding: utf-8 -*-
"""employeesalaryprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nX1fTury3KVwuySg9zCObZMQgRYKXTHX
"""

import pandas as pd

data=pd.read_csv("/adult 3.csv")

data

data.shape

data.head()

data.head(5)

data.tail()

data.tail(8)

data.isna()

data.isna().sum()

print(data.gender.value_counts())       #run

print(data.occupation.value_counts())

data.occupation.replace({'?':'others'},inplace=True)

print(data.occupation.value_counts())

print(data['workclass'].value_counts())

data.workclass.replace({'?':'notlisted'},inplace=True)

print(data['workclass'].value_counts())

data=data[data['workclass']!='Without-pay']

data=data[data['workclass']!='Never-worked']

print(data['workclass'].value_counts())

print(data.education.value_counts())

data=data[data['education']!='5th-6th']

data=data[data['education']!='1st-4th']

data=data[data['education']!='Preschool']

print(data.education.value_counts())

data.drop(columns=['education'],inplace=True)

data

import matplotlib.pyplot as plt

plt.boxplot(data['age'])

plt.show()

data=data[(data['age']<=75)&(data['age']>17)]

plt.boxplot(data['age'])

plt.show()

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['workclass']=encoder.fit_transform(data['workclass'])
data['marital-status']=encoder.fit_transform(data['marital-status'])
data['occupation']=encoder.fit_transform(data['occupation'])
data['relationship']=encoder.fit_transform(data['relationship'])
data['gender']=encoder.fit_transform(data['gender'])
data['race']=encoder.fit_transform(data['race'])

data['native-country']=encoder.fit_transform(data['native-country'])

data

x=data.drop(columns=['income'])
y=data['income']

x

y

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
x=scaler.fit_transform(x)
x       #run
from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42, stratify=y)

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier()
knn.fit(xtrain,ytrain)
predict=knn.predict(xtest)

predict

from sklearn.metrics import accuracy_score
accuracy_score=accuracy_score(ytest,predict)

accuracy_score

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(xtrain, ytrain)
predict=lr.predict(xtest)

predict

from sklearn.metrics import accuracy_score
accuracy_score=accuracy_score(ytest,predict)

accuracy_score

from sklearn.neural_network import MLPClassifier
clf=MLPClassifier(solver='adam',hidden_layer_sizes=(5,2),random_state=1)
clf.fit(xtrain,ytrain)
predict2=clf.predict(xtest)

predict2

from sklearn.metrics import accuracy_score
accuracy_score=accuracy_score(ytest,predict)

accuracy_score

from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler,OneHotEncoder
X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=42)
models={
    "LogisticRegression":LogisticRegression(),
    "RandomForest":RandomForestClassifier(),
    "KNN":KNeighborsClassifier(),
    "SVM":SVC(),
    "GradientBoosting":GradientBoostingClassifier(),

}
results={}

for name,model in models.items():
  pipe=Pipeline([
      ('scaler',StandardScaler()),
      ('model',model)
  ])
  pipe.fit(X_train,Y_train)
  Y_pred=pipe.predict(X_test)
  acc=accuracy_score(Y_test,Y_pred)
  results[name]=acc
  print(f"{name}  Accuracy: {acc:.4f}")
  print(classification_report(Y_test,Y_pred))